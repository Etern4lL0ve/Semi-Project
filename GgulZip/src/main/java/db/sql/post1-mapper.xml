<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
	
	<entry key="listCount">
		SELECT COUNT(*) COUNT
		FROM POST
		WHERE STATUS = 'Y'
	</entry>
	
	<entry key="selectList">
		SELECT *
		FROM (
		    SELECT
		        P.POST_NO,
		        C.CATEGORY_NAME,
		        P.TITLE,
		        P.CONTENT,
		        P.COUNT,
		        P.LIKE_COUNT,
		        m.MEMBER_NICKNAME,
		        P.POST_DATE
		    FROM POST P
		    JOIN MEMBER m ON p.MEMBER_NO = m.MEMBER_NO
		    JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
		    WHERE P.STATUS = 'Y'
		    ORDER BY P.POST_NO) A
			WHERE POST_NO BETWEEN ? AND ?
			
			
	</entry>
	
	<entry key = "increaseCount">
		UPDATE POST
		SET COUNT = COUNT + 1
		WHERE POST_NO = ?
		AND STATUS = 'Y'
	</entry>
	
	<entry key = "selectPost">
		SELECT P.POST_NO,
		       C.CATEGORY_NAME,
		       P.TITLE,
		       P.CONTENT,
		       M.MEMBER_NICKNAME,
		       P.POST_DATE,
		       P.COUNT,
		       P.LIKE_COUNT,
		       P.INTEREST_COUNT,
		       A.REF_BNO,
		       A.ORIGIN_NAME,
		       A.CHANGE_NAME,
		       A.FILE_PATH
		FROM POST P
		JOIN MEMBER M ON P.MEMBER_NO = M.MEMBER_NO
		JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
		LEFT JOIN ATTACHMENT A ON P.POST_NO = A.REF_BNO
		WHERE P.POST_NO = ?
		AND P.STATUS = 'Y'
	</entry>
	
	<!-- 댓글 insert -->
	<entry key = "insertComment">
	INSERT INTO COMMENT_TABLE(COMMENT_NO,
							 POST_NO,
						 	 COMMENT_WRITER_NO,
						 	 COMMENT_CONTENT)
					VALUES (SEQ_CNO.NEXTVAL,
								 ?,
								 ?,
						 		 ?)	
	</entry>
	
	
	<!-- 댓글 select -->
	<entry key = "selectCommentList">
	SELECT COMMENT_NO  
	    , MEMBER_NICKNAME       
	    , COMMENT_CONTENT
	    , COMMENT_DATE
		FROM COMMENT_TABLE C
		JOIN MEMBER M ON(M.MEMBER_NO = C.COMMENT_WRITER_NO)
	    WHERE POST_NO = ?
	</entry>
	
	
	<!-- 댓글 update -->
	<entry key = "updateComment">
		UPDATE COMMENT_TABLE
		SET COMMENT_CONTENT = ?
		WHERE POST_NO = ?
		AND COMMENT_NO = ?
	</entry>
	
	<!-- 댓글 delete -->
	<entry key = "deleteComment">
		DELETE 
		FROM COMMENT_TABLE
		WHERE POST_NO = ?
		AND COMMENT_NO = ?
	</entry>
	
	
	
	
	
	<!-- 게시글 작성 -->
	<entry key="insertPost">
		INSERT INTO POST (POST_NO
		, MEMBER_NO
		, CATEGORY_NO
		, TITLE
		, CONTENT)
		VALUES (SEQ_PNO.NEXTVAL
		, ?
		, ?
		, ?
		, ?)
	</entry>
	
	
	<!-- 첨부파일 등록 -->
	<entry key="insertAttachment">
		INSERT INTO ATTACHMENT(FILE_NO
							  ,REF_BNO
							  ,ORIGIN_NAME
							  ,CHANGE_NAME
							  ,FILE_PATH)
				    VALUES(SEQ_FNO.NEXTVAL
				    		,SEQ_PNO.CURRVAL
				    		,?
				    		,?
				    		,?)
	</entry>
	
	<!-- 첨부파일 조회 -->
	<entry key="selectAttachment">
		SELECT FILE_NO
			  ,ORIGIN_NAME
			  ,CHANGE_NAME
			  ,FILE_PATH
		FROM ATTACHMENT
		WHERE REF_BNO = ?
	</entry>
	
	<entry key="selectTitlePost">
    	SELECT P.POST_NO, C.CATEGORY_NAME, P.TITLE, P.CONTENT, P.COUNT, M.MEMBER_NICKNAME, P.POST_DATE 
    	FROM POST P
    	JOIN MEMBER M ON (P.MEMBER_NO = M.MEMBER_NO)
    	JOIN CATEGORY C ON (P.CATEGORY_NO = C.CATEGORY_NO)
    	WHERE P.TITLE LIKE ?
    	AND P.STATUS = 'Y'
	</entry>

	<entry key="selectContentPost">
    	SELECT P.POST_NO, C.CATEGORY_NAME, P.TITLE, P.CONTENT, P.COUNT, M.MEMBER_NICKNAME, P.POST_DATE
   		FROM POST P
   		JOIN MEMBER M ON (P.MEMBER_NO = M.MEMBER_NO)
   		JOIN CATEGORY C ON (P.CATEGORY_NO = C.CATEGORY_NO)
    	WHERE P.CONTENT LIKE ?
    	AND P.STATUS = 'Y'
	</entry>

	<entry key="selectNicknamePost">
    	SELECT P.POST_NO, C.CATEGORY_NAME, P.TITLE, P.CONTENT, P.COUNT, M.MEMBER_NICKNAME, P.POST_DATE
    	FROM POST P
    	JOIN MEMBER M ON (P.MEMBER_NO = M.MEMBER_NO)
		JOIN CATEGORY C ON (P.CATEGORY_NO = C.CATEGORY_NO)
    	WHERE M.MEMBER_NICKNAME LIKE ?
    	AND P.STATUS = 'Y'
	</entry>

	<entry key="selectTitleContentPost">
    	SELECT P.POST_NO, C.CATEGORY_NAME, P.TITLE, P.CONTENT, P.COUNT, M.MEMBER_NICKNAME, P.POST_DATE
    	FROM POST P
    	JOIN MEMBER M ON (P.MEMBER_NO = M.MEMBER_NO)
    	JOIN CATEGORY C ON (P.CATEGORY_NO = C.CATEGORY_NO)
    	WHERE (TITLE LIKE ? OR CONTENT LIKE ?)
   		AND P.STATUS = 'Y'
	</entry>
	
	
	<!-- 조회수 기준으로 정렬한 리스트 가져오기 -->
	<entry key="selectPopularListByCount">	            
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM,A.*
		        FROM(
		            SELECT P.POST_NO,
		                    C.CATEGORY_NAME,
		                    P.TITLE,
		                    P.CONTENT,
		                    P.COUNT,
		                    P.LIKE_COUNT,
		                    P.INTEREST_COUNT,
		                    m.MEMBER_NICKNAME,
		                    P.POST_DATE
		        FROM POST P
		        JOIN MEMBER m ON p.MEMBER_NO = m.MEMBER_NO
		        JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
		        WHERE P.STATUS = 'Y'
		        ORDER BY COUNT DESC) A
		)
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	<!-- 좋아요 수 기준으로 정렬한 리스트 가져오기 -->
	<entry key="selectPopularListByLikeCount">	            
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM,A.*
		        FROM(
		            SELECT P.POST_NO,
		                    C.CATEGORY_NAME,
		                    P.TITLE,
		                    P.CONTENT,
		                    P.COUNT,
		                    P.LIKE_COUNT,
		                    P.INTEREST_COUNT,
		                    m.MEMBER_NICKNAME,
		                    P.POST_DATE
		        FROM POST P
		        JOIN MEMBER m ON p.MEMBER_NO = m.MEMBER_NO
		        JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
		        WHERE P.STATUS = 'Y'
		        ORDER BY LIKE_COUNT DESC) A
		)
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	
	
	<!-- 관심글 수 기준으로 정렬한 리스트 가져오기 -->
	<entry key="selectPopularListByInterCount">	            
		SELECT *
		FROM (
		    SELECT ROWNUM RNUM,A.*
		        FROM(
		            SELECT P.POST_NO,
		                    C.CATEGORY_NAME,
		                    P.TITLE,
		                    P.CONTENT,
		                    P.COUNT,
		                    P.LIKE_COUNT,
		                    P.INTEREST_COUNT,
		                    m.MEMBER_NICKNAME,
		                    P.POST_DATE
		        FROM POST P
		        JOIN MEMBER m ON p.MEMBER_NO = m.MEMBER_NO
		        JOIN CATEGORY C ON P.CATEGORY_NO = C.CATEGORY_NO
		        WHERE P.STATUS = 'Y'
		        ORDER BY INTEREST_COUNT DESC) A
		)
		WHERE RNUM BETWEEN ? AND ?
	</entry>
	
</properties>